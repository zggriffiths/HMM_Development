# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the benzoate family of Rieske non-heme iron oxygenases/Ibuprofen-CoA dioxygenases and related enzymes/HMMER/ibf_bckgdseqs.tbl", comment.char = "#", header = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the benzoate family of Rieske non-heme iron oxygenases/Ibuprofen-CoA dioxygenases and related enzymes/HMMER/ipf_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the benzoate family of Rieske non-heme iron oxygenases/p-Cumate dioxygenases/HMMER/cmtA-BenzoateFamily_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Angular dioxygenases of dibenzofuran metabolism/HMMER/DBFMetabolism_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Biphenyl:benzene dioxygenaseses/HMMER/bphA-BDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Diterpenoid dioxygenases and related enzymes/HMMER/DitA_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Naphthalene dioxygenases/HMMER/NDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/PAH dioxygenases of Actinobacteria/PAHDioxygenases_Actinobacteria_bckgdseqs.tbl", comment.char = "#", header = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/PAH dioxygenases of Actinobacteria/HMMER/PAHDioxygenases_Actinobacteria_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Phenylpropionate dioxygenases/HMMER/Hca_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Rieske oxygenases - Biphenyl Family/HMMER/RieskeOxygenases_Actinobacteria-Mycobacteria-Firmicutes_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the biphenyl family of Rieske non-heme iron oxygenases/Tetralin, bipheny, ethylbenzene, xylene dioxygenases and related enzymes/HMMER/Tetralin-Bipheny-Ethylbenzene-XyleneDioxygenases_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/1-Oxo-2,3-Dihydroquinoline/HMMER/oxoO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/3-Chlorobenzoate dioxygenases and related enzymes, probable phthalate dioxygenase activity/HMMER/CBA-PhthalateFamily_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/4-Aminobenzenesulfonate 3,4-dioxygenase and related enzymes/HMMER/Sad_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Carbazol and diphenylamin dioxygenases/HMMER/CARDO-DPA_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Enzymes related to 5,5'-dehydrodivanillate demethylase/HMMER/ligX_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Enzymes related to phenoxybenzoate/HMMER/Related_pob_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Isophthalate dioxygenases and related enzymes/HMMER/iphA_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Phthalate 4,5-dioxygenases/HMMER/PDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Phthalate 4,5-dioxygenases/HMMER/PDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Putative phthalate 4,5-dioxygenases/HMMER/PutativeDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the HMMER output file
scores <- read.table("~/Documents/aromadeg/Phylogenomic clusters of α-subunits of the phthalate family of Rieske non-heme iron oxygenases/Putative phthalate 4,5-dioxygenases/HMMER/PutativePDO_bckgdseqs.tbl", comment.char = "#", header = FALSE)
# Extract the relevant column (assuming the score is in column 5)
score_values <- scores$V6
e_values <- scores$V5
# Plot the score distribution
scores_plot <- ggplot(data.frame(score = score_values), aes(x = score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Score Distribution", x = "Score", y = "Frequency")
scores_plot
# Plot the e-value distribution
#e_values_plot <- ggplot(data.frame(evalue = e_values), aes(x = evalue)) +
#geom_histogram(binwidth = 1, fill = "blue", color = "black") +
#labs(title = "E-value Distribution", x = "E-value", y = "Frequency")
#e_values_plot
# Calculate the noise cutoff (e.g., mean + 2*SD)
mean_score <- mean(score_values)
sd_score <- sd(score_values)
noise_cutoff_95 <- mean_score + 2 * sd_score
noise_cutoff_90 <- mean_score + 1.645 * sd_score
# Print the noise cutoff
print(paste("Noise Cutoff at 95% CI:", noise_cutoff_95, "Noise Cutoff at 90% CI:", noise_cutoff_90))
